"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngAdd = void 0;
const tasks_1 = require("@angular-devkit/schematics/tasks");
const workspace_1 = require("@schematics/angular/utility/workspace");
const utils_1 = require("@angular/cdk/schematics/utils");
function ngAdd(options) {
    return (tree, context) => __awaiter(this, void 0, void 0, function* () {
        context.addTask(new tasks_1.NodePackageInstallTask());
        // get the workspace config of the consuming project
        // i.e. angular.json file
        const workspace = yield workspace_1.getWorkspace(tree);
        if (!options.project) {
            options.project = workspace.projects.keys().next().value;
        }
        const project = workspace.projects.get(options.project);
        // inject our module into the current main module of the selected project
        utils_1.addModuleImportToRootModule(
        // tree to modify
        tree, 
        // Module name to insert
        'DocumentEditorModule', 
        // project name for import statement
        '@txtextcontrol/tx-ng-document-editor', 
        // project to be modified
        project);
    });
}
exports.ngAdd = ngAdd;
//# sourceMappingURL=index.js.map